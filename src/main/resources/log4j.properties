# 日志输出级别（INFO）和输出位置（stdout，R）
log4j.rootLogger=INFO, stdout , R

# 日志输出位置为控制台,这是 stdout 的配置信息
#   此句为将等级为INFO的日志信息输出到stdout和R这两个目的地，stdout和R的定义在下面的代码，可以任意起名。
#   等级可分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL，如果配置OFF则不打出任何信息，如果配置为INFO这样只显示INFO, WARN, ERROR的log信息，而DEBUG信息不会被显示，
#   具体讲解可参照第三部分定义配置文件中的logger

# 此句为定义名为stdout的输出端是哪种类型，
# 可以是org.apache.log4j.ConsoleAppender（控制台），
# org.apache.log4j.FileAppender（文件），
# org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
# org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
# org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.stdout=org.apache.log4j.ConsoleAppender

# 此句为定义名为stdout的输出端的layout是哪种类型，
# 可以是org.apache.log4j.HTMLLayout（以HTML表格形式布局），
# org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
# org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
# org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

# 如果使用pattern布局就要指定的打印信息的具体格式ConversionPattern，
# 打印参数如下：%m 输出代码中指定的消息；%M 输出打印该条日志的方法名；%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL；
# %r 输出自应用启动到输出该log信息耗费的毫秒数；
# %c 输出所属的类目，通常就是所在类的全名；
# %t 输出产生该日志事件的线程名；
# %n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”；
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2002-10-18 22:10:28,921；
# %l 输出日志事件的发生位置，及在代码中的行数；
# [log4j]是log信息的开头，可以为任意字符，一般为项目简称。
log4j.appender.stdout.layout.ConversionPattern=[log4j] %d %p [%t] %C.%M(%L) ' %m '%n 

# 日志输出位置为文件,这是 R 的配置信息
log4j.appender.R=org.apache.log4j.DailyRollingFileAppender
log4j.appender.R.File=logs/qc.log
log4j.appender.R.layout=org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern=%d-[logFile] %p %t %c - %m%n

# 定义相应包路径下的日志输出级别
log4j.logger.com.alibaba=DEBUG
log4j.logger.com.opensymphony.oscache=ERROR
log4j.logger.org.springframework=DEBUG
log4j.logger.com.ibatis.db=WARN
log4j.logger.org.apache.velocity=FATAL

log4j.logger.org.hibernate.ps.PreparedStatementCache=WARN
log4j.logger.org.hibernate=DEBUG
log4j.logger.org.logicalcobwebs=WARN